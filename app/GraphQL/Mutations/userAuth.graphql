input RegisterInput {
    first_name: String
    last_name: String
    email: String! @rules(apply: ["required", "email", "unique:users,email"])
    signup_ip: String! @rules(apply: ["required", "ip"])
    password: String! @rules(apply: ["required", "confirmed", "min:8"])
    password_confirmation: String!
    # client_id: Int!
    # client_secret: String!
}

input LoginInput {
    username: String! @rules(apply: ["required", "email"])
    password: String!
}

input SocialLoginInput {
    provider: String! @rules(apply: ["required"])
    token: String! @rules(apply: ["required"])
}

input VerifyEmailInput {
    id: ID
    token: String!
}

input ResendVerificationEmailInput {
    email: String! @rules(apply: ["required", "email"])
}

input ForgotPasswordInput {
    email: String! @rules(apply: ["required", "email"])
}

input UpdatePassword {
    password: String! @rules(apply: ["required", "confirmed", "min:8"])
    password_confirmation: String!
}

input NewPasswordWithCodeInput {
    email: String! @rules(apply: ["required", "email"])
    token: String! @rules(apply: ["required", "string"])
    password: String! @rules(apply: ["required", "confirmed", "min:8"])
    password_confirmation: String!
}

input RefreshTokenInput {
    refresh_token: String
}

type RegisterResponse {
    tokens: AuthPayload
    status: RegisterStatuses!
}

type ResendVerificationEmailResponse {
    status: ReturnStatuses!
    message: String
}

type LogoutResponse {
    status: String!
    message: String
}

type ForgotPasswordResponse {
    status: String!
    message: String
    user: User
}

type UpdatePasswordResponse {
    status: String!
    message: String
}

type AuthPayload {
    access_token: String
    refresh_token: String
    expires_in: Int
    token_type: String
    user: User
    status: ReturnStatuses
    message: String
}

type RefreshTokenPayload {
    access_token: String!
    refresh_token: String!
    expires_in: Int!
    token_type: String!
}

enum ReturnStatuses {
    FAIL
    SUCCESS
}

enum RegisterStatuses {
    MUST_VERIFY_EMAIL
    SUCCESS
}


type Mutation {

    register(input: RegisterInput @spread): RegisterResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve")

    verifyEmail(input: VerifyEmailInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\VerifyEmail@resolve")

    resendVerificationEmail(input: ResendVerificationEmailInput! @spread): ResendVerificationEmailResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResendVerificationEmail@resolve")

    login(input: LoginInput @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve")

    socialLogin(input: SocialLoginInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\SocialLogin@resolve")

    logout: LogoutResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve")

    forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve")

    updateForgottenPassword(input: NewPasswordWithCodeInput @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve")

    updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\UpdatePassword@resolve") @guard(with:["api"])

    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve")
}
